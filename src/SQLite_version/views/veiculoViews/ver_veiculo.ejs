<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>Veículos</h2>
        <p class="text-muted mb-0">Lista de veículos cadastrados</p>
    </div>
    <button class="btn btn-outline-primary" onclick="carregarVeiculos()">Atualizar</button>
</div>

<div id="message" class="alert" style="display:none;"></div>

<div class="card">
    <div class="table-responsive">
        <table class="table mb-0">
            <thead>
                <tr>
                    <th>ID</th>
					<th>Modelo do Veículo</th>
					<th>Descrição do Veículo</th>
					<th>Matricula do Veículo</th>
					<th>Capacidade Principal</th>
					<th>Opções</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <tr id="loadingRow">
                    <td colspan="5" class="text-center py-3">Carregando...</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
	// Carrega a lista de veiculos
	async function carregarVeiculos() {
		const token = localStorage.getItem('token');
		try {
			const response = await fetch('/api/veiculos/list', {
				method: 'POST',
				headers: {
					'Authorization': `Bearer ${token}`
				}
			});
			const result = await response.json();
			const messageDiv = document.getElementById('message');

			if (result.error) {
				emitirMensagem(messageDiv, 'danger', result.error || 'Erro ao listar veiculos.');
			} else {
				const tableBody = document.getElementById('tableBody');
				tableBody.innerHTML = '';
				if (result.length <= 0) {
					emitirMensagem(messageDiv, 'warning', 'Não existe veiculos cadastrados.');
				} else {
					const podeEditar = podeEditarDeletar();
					
					for (let i = 0; i < result.length; i++) {
						const element = result[i];
						tableBody.innerHTML += `<tr id="colum${i}"></tr>`;
						const atualColm = document.getElementById(`colum${i}`);

						atualColm.innerHTML += `<td><span class="badge bg-primary">${element.id}</span></td>`;
						atualColm.innerHTML += `<td><strong>${element.modelo}</strong></td>`;
						atualColm.innerHTML += `<td class="text-muted">${element.descricao || 'N/A'}</td>`;
						atualColm.innerHTML += `<td><span class="badge bg-secondary">${element.matricula}</span></td>`;
						atualColm.innerHTML += `<td>${element.capacidade} Pessoa(s)</td>`;
						
						if (podeEditar) {
							atualColm.innerHTML += `
								<td>
									<button class="btn btn-sm btn-outline-primary me-1" onclick="editarVeiculo(${element.id})" title="Editar">
										<i class="bi bi-pencil"></i>
									</button>
									<button class="btn btn-sm btn-outline-danger" onclick="confirmarDelete(${element.id}, 'veiculo')" title="Excluir">
										<i class="bi bi-trash"></i>
									</button>
								</td>`;
						} else {
							atualColm.innerHTML += `<td>-</td>`;
						}
					}
				}
			}
		} catch (err) {
			console.error('Erro:', err);
			const messageDiv = document.getElementById('message');
			emitirMensagem(messageDiv, 'danger', 'Erro na conexão.');
		}
	}

	// Função para verificar se pode editar/deletar
	function podeEditarDeletar() {
		const token = localStorage.getItem('token');
		if (!token) return false;
		
		try {
			const payload = JSON.parse(atob(token.split('.')[1]));
			return payload.nivel === 'admin' || payload.nivel === 'gerente';
		} catch (e) {
			return false;
		}
	}

	// Executa ao carregar
	document.addEventListener('DOMContentLoaded', carregarVeiculos());
</script>
