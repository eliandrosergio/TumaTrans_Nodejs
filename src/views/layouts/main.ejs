<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/index.css">k
</head>
<body>
    <!-- NavBar para navegação -->
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-bus-front me-2"></i>Gestão de Transporte
            </a>
            <div class="navbar-nav ms-auto d-flex flex-row" id="navLinks">
                <a class="nav-link" href="#" id="painelControlLink" style="display: none;" onclick="navigateWithToken(event, '/nav/painelControl')">
                    Painel
                </a>
                <a class="nav-link" href="/nav/logout" id="logoutLink" style="display: none;">
                    Sair
                </a>
                <a class="nav-link" href="/nav/login" id="loginLink">
                    Entrar
                </a>
            </div>
        </div>
    </nav>
    
    <!-- Corpo do site gerenciado pelo ejs -->
    <div style="padding-top: 70px;">
        <div class="container">
            <div class="main-content">
                <%- body %>
            </div>
        </div>
    </div>
    
    <!-- Footer informativo -->
    <footer class="bg-light border-top mt-5">
        <div class="container">
            <div class="row py-4">
                <div class="col-md-6">
                    <h6 class="mb-2">Sistema de Gestão de Transporte Escolar</h6>
                    <p class="text-muted mb-0">Complexo Escolar Privado Tchiungo</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p class="text-muted mb-0">© 2024 - Desenvolvido por eliandrosergio</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- Modal de Confirmação -->
    <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Confirmar</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body" id="modalBody">
                    Tem certeza que deseja continuar?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="modalNegar">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="modalConfirm">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Carrega Bootstrap se não estiver disponível
        if (typeof bootstrap === 'undefined') {
            const script = document.createElement('script');
            script.src = '/js/bootstrap.bundle.min.js';
            script.onload = function() {
                console.log('Bootstrap carregado dinamicamente');
            };
            document.head.appendChild(script);
        }

        // Emite uma mensagem em uma div com o seu tipo certo
        function emitirMensagem( messageDiv, tipo, msg, ocultar ) {
            messageDiv.className = `alert alert-${tipo}`;
            messageDiv.textContent = msg;
            if (ocultar) {
                messageDiv.style.display = 'none';
            } else {
                messageDiv.style.display = 'block';
            }
            setTimeout(() => messageDiv.style.display = 'none', 8000);
            return ;
        }

        // Nova função para navegação tradicional com token em cookie goToPage
        function navigateWithToken(event, url) {
            event.preventDefault();
            const token = localStorage.getItem('token');
            if (!token) {
                alert('Faça login primeiro');
                window.location.href = '/nav/login';
                return;
            }
            // Define o cookie e navega normalmente
            document.cookie = `authToken=${token}; path=/; max-age=3600`;
            window.location.href = url;
        }

        // Atualiza a navegação com base no token
        function updateNav() {
            const token = localStorage.getItem('token');
            const painelControlLink = document.getElementById('painelControlLink');
            const logoutLink = document.getElementById('logoutLink');
            const loginLink = document.getElementById('loginLink');

            if (token) {
                painelControlLink.style.display = 'block';
                logoutLink.style.display = 'block';
                loginLink.style.display = 'none';
            } else {
                painelControlLink.style.display = 'none';
                logoutLink.style.display = 'none';
                loginLink.style.display = 'block';
            }
        }

        // Função para mostrar modal de confirmação
        function mostrarModal( titulo, mensagem, callback, isNoQuestion ) {
            document.getElementById('modalTitle').textContent = titulo;
            document.getElementById('modalBody').textContent = mensagem;
            
            const modalElement = document.getElementById('confirmModal');
            const modal = new bootstrap.Modal(modalElement);
            const confirmBtn = document.getElementById('modalConfirm');
            const negarBtn = document.getElementById('modalNegar');
            
            // Ajusta visibilidade dos botões
            if (isNoQuestion) {
                negarBtn.style.display = 'none';  // era 'block'
                confirmBtn.textContent = 'OK';
            } else {
                negarBtn.style.display = '';
                confirmBtn.textContent = 'Confirmar';
            }

            // Remove listeners anteriores AMBOS botões
            const newConfirmBtn = confirmBtn.cloneNode(true);
            const newNegarBtn = negarBtn.cloneNode(true);
            confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
            negarBtn.parentNode.replaceChild(newNegarBtn, negarBtn);
            
            // Adiciona novo listener
            document.getElementById('modalConfirm').addEventListener('click', () => {
                modal.hide();
                // Aguarda o modal fechar completamente antes de executar callback
                modalElement.addEventListener('hidden.bs.modal', callback, { once: true });
            });
            
            modal.show();
        }

        // Função para confirmar exclusão
        function confirmarDelete(id, tipo) {
            mostrarModal('Confirmar Exclusão', `Tem certeza que deseja excluir este ${tipo}?`, () => {
                deletarItem(id, tipo);
            }, false);
        }

        // Função para deletar item
        async function deletarItem(id, tipo) {
            const token = localStorage.getItem('token');
            try {
                const response = await fetch(`/api/${tipo}s/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const result = await response.json();
                if (response.ok) {
                    mostrarModal('Sucesso', result.message, () => {
                        location.reload();
                    }, true);
                } else {
                    mostrarModal('Erro', result.error, () => {}, true);
                }
            } catch (err) {
                console.error('Erro:', err);
                mostrarModal('Erro', 'Erro na conexão.', () => {}, true);
            }
        }

        // Funções para editar itens
        function editarAluno(id) {
            navigateWithToken(event, `/api/alunos/editar?id=${id}`);
        }

        function editarMotorista(id) {
            navigateWithToken(event, `/api/motoristas/editar?id=${id}`);
        }

        function editarVeiculo(id) {
            navigateWithToken(event, `/api/veiculos/editar?id=${id}`);
        }

        function editarRota(id) {
            navigateWithToken(event, `/api/rotas/editar?id=${id}`);
        }
        
        // Inicializa a navegação ao carregar a página e ao mudar o localStorage
        document.addEventListener('DOMContentLoaded', updateNav);
        
        // Escuta mudanças no localStorage para atualizar a navegação
        window.addEventListener('storage', updateNav);
    </script>
</body>
</html>
